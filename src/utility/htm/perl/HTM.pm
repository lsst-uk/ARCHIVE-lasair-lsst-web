# This file was automatically generated by SWIG
package HTM;
require Exporter;
require DynaLoader;
@ISA = qw(Exporter DynaLoader);
package HTMc;
bootstrap HTM;
package HTM;
@EXPORT = qw( );

# ---------- BASE METHODS -------------

package HTM;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package HTM;


############# Class : HTM::htmRangeVector ##############

package HTM::htmRangeVector;
@ISA = qw( HTM );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = HTMc::new_htmRangeVector(@_);
    bless $self, $pkg if defined($self);
}

*size = *HTMc::htmRangeVector_size;
*empty = *HTMc::htmRangeVector_empty;
*clear = *HTMc::htmRangeVector_clear;
*push = *HTMc::htmRangeVector_push;
*pop = *HTMc::htmRangeVector_pop;
*get = *HTMc::htmRangeVector_get;
*set = *HTMc::htmRangeVector_set;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        HTMc::delete_htmRangeVector($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : HTM::htmRange ##############

package HTM::htmRange;
@ISA = qw( HTM );
%OWNER = ();
%ITERATORS = ();
*swig_lo_get = *HTMc::htmRange_lo_get;
*swig_lo_set = *HTMc::htmRange_lo_set;
*swig_hi_get = *HTMc::htmRange_hi_get;
*swig_hi_set = *HTMc::htmRange_hi_set;
sub new {
    my $pkg = shift;
    my $self = HTMc::new_htmRange(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        HTMc::delete_htmRange($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : HTM::htmPolyCorner ##############

package HTM::htmPolyCorner;
@ISA = qw( HTM );
%OWNER = ();
%ITERATORS = ();
*swig_c__get = *HTMc::htmPolyCorner_c__get;
*swig_c__set = *HTMc::htmPolyCorner_c__set;
*swig_inside__get = *HTMc::htmPolyCorner_inside__get;
*swig_inside__set = *HTMc::htmPolyCorner_inside__set;
*swig_replace__get = *HTMc::htmPolyCorner_replace__get;
*swig_replace__set = *HTMc::htmPolyCorner_replace__set;
sub new {
    my $pkg = shift;
    my $self = HTMc::new_htmPolyCorner(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        HTMc::delete_htmPolyCorner($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : HTM::htmInterface ##############

package HTM::htmInterface;
@ISA = qw( HTM );
%OWNER = ();
%ITERATORS = ();
*fillValueVec = *HTMc::htmInterface_fillValueVec;
sub new {
    my $pkg = shift;
    my $self = HTMc::new_htmInterface(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        HTMc::delete_htmInterface($self);
        delete $OWNER{$self};
    }
}

*index = *HTMc::htmInterface_index;
*pointById = *HTMc::htmInterface_pointById;
*adjustDepthToID = *HTMc::htmInterface_adjustDepthToID;
*lookupID = *HTMc::htmInterface_lookupID;
*lookupIDCmd = *HTMc::htmInterface_lookupIDCmd;
*lookupName = *HTMc::htmInterface_lookupName;
*lookupNameCmd = *HTMc::htmInterface_lookupNameCmd;
*circleRegion = *HTMc::htmInterface_circleRegion;
*circleRegionCmd = *HTMc::htmInterface_circleRegionCmd;
*convexHull = *HTMc::htmInterface_convexHull;
*convexHullCmd = *HTMc::htmInterface_convexHullCmd;
*domain = *HTMc::htmInterface_domain;
*domainCmd = *HTMc::htmInterface_domainCmd;
*changeDepth = *HTMc::htmInterface_changeDepth;
*isInteger = *HTMc::htmInterface_isInteger;
*isFloat = *HTMc::htmInterface_isFloat;
*inRange = *HTMc::htmInterface_inRange;
*printRange = *HTMc::htmInterface_printRange;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package HTM;

1;
